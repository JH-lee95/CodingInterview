#------내 답안------#
def solution(s):
    
    #최소의 문자길이를 담을 변수
    min_length=len(s)
    
    # i: 슬라이싱의 단위
    # 문자열 s를 i로 정확히 나눌 수 있을 때만 고려
    for i in range(1,len(s)//2+1):
            temp_s=""
            count=1
            
            #슬라이싱 후 문자집합의 개수
            sliced=len(s)//i
            
            #print("자르는 단위: ",i)
            
            for n in range(sliced):
                
                if s[n*i:(n+1)*i]==s[(n+1)*i:(n+2)*i]:
                    count+=1
                else:
                    if count!=1:
                        temp_s=temp_s+str(count)+s[n*i:(n+1)*i]
                        count=1
                    else:
                        temp_s=temp_s+s[n*i:(n+1)*i]
                if len(s[(n+1)*i:])<i:
                    if count!=1:
                        temp_s=temp_s+str(count)+s[(n+1)*i:]
                    else:
                        temp_s=temp_s+s[(n+1)*i:]
                        
                    
               
            #print("문자열 : ",temp_s, "길이 : ",len(temp_s))
           
            if len(temp_s)<min_length:
                min_length=len(temp_s)
         
    return min_length

#------내 답안------#


#------모범 답안------#

def compress(text, tok_len):
    words = [text[i:i+tok_len] for i in range(0, len(text), tok_len)]
    res = []
    cur_word = words[0]
    cur_cnt = 1
    for a, b in zip(words, words[1:] + ['']):
        if a == b:
            cur_cnt += 1
        else:
            res.append([cur_word, cur_cnt])
            cur_word = b
            cur_cnt = 1
    return sum(len(word) + (len(str(cnt)) if cnt > 1 else 0) for word, cnt in res)

def solution(text):
    return min(compress(text, tok_len) for tok_len in list(range(1, int(len(text)/2) + 1)) + [len(text)])
    
#------모범 답안------# , 굉장히 파이썬스러운 답안이다. 참고하자!
