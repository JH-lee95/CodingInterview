import sys

input=sys.stdin.readline

INF=int(1e9) #충분히 큰 값, 초기화시 노드간의 거리

n,m=map(int,input().split())

start=int(input()) #시작 번호 

graph=[[] for i in range(n+1)] #각 노드에 연결되어 있는 연결된 노드 정보
#n+1 인 이유는 노드 번호와 인덱스 번호를 맞추기 위해

visited=[False] * (n+1) #방문 여부 체크

distance=[INF] * (n+1) #초기화시 거리는 무한대 

for _ in range(m):
    a,b,c=map(int,input().split()) #a에서 b로 가는 비용이 c
    graph[a].append((b,c))


def get_smallest_node(): #최단 거리가 가장 짧은 노드
    min_value=INF
    index=0

    for i in range(1,n+1):
        if distance[i]<min_value and not visited[i]: 
            min_value=distnace[i]
            index=i
    return index


def dijkstra(start):
    distance[start]=0
    visited[start]=True

    for j in graph[strat]:
        distance[j[0]]=j[1]

    for i in range(n-1):
        now=get_smallest_node()
        visited[now]=True

        for j in graph[now]:
            cost=distance[now]+j[1]
            if cost<distance[j[0]]:
                distance[j[0]]=cost


dijkstra(start)


for i in range(1,n+1):
    if distance[i]==INF:
        print("INFINITY")
    else:
        print(distance[i])

