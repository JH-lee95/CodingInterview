# ----------------내 답안----------------

from collections import deque

n,m,k,x=map(int,input().split())  #노드개수,도로의 개수,거리 정보, 출발 도시 번호

graph=[]

for i in range(m):
  graph.append(list(map(int,input().split()))) # a,b로 가는 단방향 도로


array=[[] for i in range(n+1)]  # 노드의 개수 + 1 만큼 리스트 만들기 (2차원 리스트)

for i in graph:
  array[i[0]].append(i[1]) #i번째 인덱스(노드의 번호)에 연결된 


def bfs(array,k,x):
 
  result=[] # 결과를 담을 리스트
  nth=[0] * (n+1) #해당 노드가 x번째 노드에서 몇번째로 거치는 노드인지 기록할 리스트

  queue=deque([x]) #queue로 구현

  while queue:
    v=queue.popleft()

    for j in array[v]:

      nth[j]=nth[v]+1 #j노드는 그 이전 노드에서 +1 번째 노드

      if nth[j]==k: #j가 시작노드에서 k번째 노드라면 result에 추가
        result.append(j)

      if len(array[j])!=0: #해당 노드에서 연결된 다른 노드가 있을 떄만 큐에 추가
        queue.append(j)

  if len(result)==0:
    return -1
  return result[::-1]

bfs(array,k,x)

# ----------------내 답안----------------






# ----------------모범 답안----------------


n,m,k,x=map(int,input().split())  #노드개수,도로의 개수,거리 정보, 출발 도시 번호

graph=[[] for _ in range(n+1)]

for _ in range(m):
  a,b=map(int,input().split())
  graph[a],append(b)

#모든 노드에 대한 최단 거리 초기화
distance=[-1] * (n+1)
distance[x]=0 #출발 도시까지의 거리는 0

q=deque([x])

now=q.popleft()

#현재 도시에 연결된 모든 도시 탐색
for next_node in graph[now]:
  #방문하지 않은 도시라면
  if distance[next_node]==-1:
    distance[next_node]=distance[now]+1
    q.append(next_node)

check=False
for i in range(1,n+1):
  if distance[i]==k:
    print(i)
    check=True

if check==False:
  print(-1)
  
# ----------------모범 답안----------------
