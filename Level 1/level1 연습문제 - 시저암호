문제 설명
어떤 문장의 각 알파벳을 일정한 거리만큼 밀어서 다른 알파벳으로 바꾸는 암호화 방식을 시저 암호라고 합니다. 예를 들어 AB는 1만큼 밀면 BC가 되고, 3만큼 밀면 DE가 됩니다. z는 1만큼 밀면 a가 됩니다. 문자열 s와 거리 n을 입력받아 s를 n만큼 민 암호문을 만드는 함수, solution을 완성해 보세요.

제한 조건
공백은 아무리 밀어도 공백입니다.
s는 알파벳 소문자, 대문자, 공백으로만 이루어져 있습니다.
s의 길이는 8000이하입니다.
n은 1 이상, 25이하인 자연수입니다.



코드컨셉:
1. string 모듈에서 영어알파벳을 출력해주는 ascii_lowercase ('a'~'z'), ascii_uppercase('A'~'Z') 를 가져온다. 
  - 물론 타자로 직접 a부터z까지 적어도 된다......
2. 입력된 문자의 각 철자를, 돌면서 n만큼 밀면 된다. 이때 z이후는 다시 a로 돌아가야 하는 것을 명심해야한다.


## 코드 시작 ##

from string import ascii_lowercase, ascii_uppercase

def solution(s, n):
    
    lower=list(ascii_lowercase)   #소문자 알파벳 리스트
    upper=list(ascii_uppercase)   #대문자 알파벳 리스트
    
    
    result=""
    for spell in s:
        if spell.islower():
            spell=lower[(lower.index(spell) + n)%26]   # z이후는 a로 돌아가야하므로, 알파벳의 총 개수인 26으로 나누어준다.
        elif spell.isupper():
            spell=upper[(upper.index(spell) + n)%26]
        result+=spell
    
    return result


## 코드 종료 ##
